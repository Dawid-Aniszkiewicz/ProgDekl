rozmiar = 5

--f(x)=2*x
razy_dwa :: Num a => a -> a
razy_dwa x = 2*x

--g(x)=x*x
kwadrat :: Integer -> Integer
kwadrat x = x*x

--h(x,y)=x^2+y^2
--sum_kw :: Num a => a -> a -> a
--sum_kw x y = kwadrat x + kwadrat y

--k(x,y)=x>y
--pierwszy_wk :: Ord a => a -> a -> Bool
--pierwszy_wk x y = x>y

pole_prosto :: Float -> Float -> Float -> Float
--pole_prosto a b c = 2*(a*b+a*c+b*c)

--pole_prosto a b c = 2*pp + pb
--	where pp = a * b
--	      pb = 2*(a*c+b*c)

pole_prosto a b c = let pp = a * b
			pb = 2*(a*c+b*c)
		    in  2*pp + pb

abs :: Float -> Float
abs x = if x<0 then (-x) else x

min :: Float -> Float -> Float
min x y = if x<y then x else y

sgn :: Float -> Float
sgn x = if x>0 then 1 else 
        if x==0 then 0 else (-1)

abs::Float->Float
abs x=if x<0 then (-x) else x

abs2 x
 |x<0 =(-x)
 |otherwise =x


min::Float->Float->Float
min x y
 |x<y =x
 |otherwise =y


xor::Bool->Bool->Bool
xor x y=if x==y then False else True

xor2::Bool->Bool->Bool
xor2 x y
 |x==y =False
 |otherwise =True

xor3::(Bool,Bool)->Bool
xor3 (x,y)=case (x,y) of (True,True)->False
			 (True,False)->True
			 (False,True)->True
			 (False,False)->False

xor4::Bool->Bool->Bool
xor4 x y=(x && not y) || (y && not x)


compare::Ord a=>a->a->Ordering
compare a b
 |a>b =GT
 |a==b =EQ
 |otherwise =LT

--sprawdz::Real a=>a->String
sprawdz::Float->String
sprawdz x
 |x<0 ="liczba mniejsza od 0"
 |x>10 ="liczba wieksza od 10"
 |otherwise ="liczba od 0 do 10"

--listy

-- (reverse[5,2,1,7]++tail[2,3])!!head[1,1,3] =
-- ([7,1,2,5]++[3]!!1 =
-- ([7,1,2,5,3])!!1 = 1

-- 1:(tail[2,3,7]++reverse[3,4,6]) =
-- 1:([3,7]++[6,4,3]) =
-- 1:[3,7,6,4,3] =
-- [1,3,7,6,4,3]

add_first::Integer->[Integer]->[Integer]
add_first a xs = [a]++xs


--kwadrat_lista (definicja rekurencyjna)

--(x:xs)=(kwadrat x):(kwadrat_lista xs)
--(x:xs)=(x*x):(kwadrat_lista xs)


kwadrat x=x*x
kwadrat_lista::[Int]->[Int]
kwadrat_lista []=[]
kwadrat_lista (x:xs)=(kwadrat x):(kwadrat_lista xs)

lista_mniejszao1::[Int]->[Int]
lista_mniejszao1 []=[]
lista_mniejszao1 (x:xs)=(x-1):(lista_mniejszao1 xs)

lista_razy5::[Int]->[Int]
lista_razy5 []=[]
lista_razy5 (x:xs)=(x*5):(lista_razy5 xs)

concat1::[Int]->[Int]->[Int]
concat1 [] l1 = l1
concat1 (h:t) l2 = h:concat1 t l2

kwadrat_lista_map::[Int]->[Int]
kwadrat_lista_map xs=map kwadrat xs

mniejszeo1 x=x-1
lista_mniejszao1_map::[Int]->[Int]
lista_mniejszao1_map xs=map mniejszeo1 xs

razy5 x=x*5
lista_razy5_map::[Int]->[Int]
lista_razy5_map xs=map razy5 xs


-- kwalifikatory
-- [2*x|x<-[1..5]] = [2,4,6,8,10]
-- [y 'mod' 3|y<-[5..10]] = [2, 0, 1, 2, 0, 1]
-- [a*b|(a,b)<-[(1,2),(2,3),(3,4)]] = [2,6,12]
-- [(x,y)|x<-[1,2],y<-[3,4]] = [(1,3),(1,4),(2,3),(2,4)]
-- [x|x<-[1..12],y<-[1..12],x*y==12] = [1, 2, 3, 4, 6, 12]
-- [(x,y)|x<-[1..3],y<-[x..3]] = [(1,1), (1,2), (1,3), (2,2), (2,3), (3,3)]
-- [x+y|x<-[1..4],y<-[1..x]] = [2, 3, 4, 4, 5, 6, 5, 6, 7, 8]
-- [x*y|x<-[5..2],y<-[1..x]] = [5, 10, 15, 20, 25, 4, 8, 12, 16, 3, 6, 9, 2, 4]

-- kwalifikatory
kwadrat_lista2::[Int]->[Int]
kwadrat_lista2 xs=[x*x|x<-xs]

lista_mniejszao1_2::[Int]->[Int]
lista_mniejszao1_2 xs=[x-1|x<-xs]

lista_razy5_2::[Int]->[Int]
lista_razy5_2 xs=[x*5|x<-xs]
